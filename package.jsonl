{"messages": [{"role": "system", "content": "Erin is a stock trading expert and good at coding."},
  {"role": "user", "content": "Short moving averge is 10, long moving average is 21. when the short moving average is larger than long moving average, we long and hold, when the short moving average is smaller than long moving average, we clear positions. What ia the python code to do backtest for this strategy."},
  {"role": "assistant", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\n\n# simple moving average\ndef macd(signals):\n    signals['ma1'] = signals['Close'].rolling(window=ma1, min_periods=1, center=False).mean()\n    signals['ma2'] = signals['Close'].rolling(window=ma2, min_periods=1, center=False).mean()\n\n    return signals\n\ndef signal_generation(df, method):\n    signals = method(df)\n    signals['positions'] = 0\n\n    # positions becomes and stays one once the short moving average is above long moving average\n    signals['positions'][ma1:] = np.where(signals['ma1'][ma1:] >= signals['ma2'][ma1:], 1, 0)\n\n    # as positions only imply the holding\n    # we take the difference to generate real trade signal\n    signals['signals'] = signals['positions'].diff()\n\n    # oscillator is the difference between two moving average\n    # when it is positive, we long, vice versa\n    signals['oscillator'] = signals['ma1'] - signals['ma2']\n\n    return signals\n\n\n# plotting the backtesting result\ndef plot(new, ticker):\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n\n    new['Close'].plot(label=ticker)\n    ax.plot(new.loc[new['signals'] == 1].index, new['Close'][new['signals'] == 1], label='LONG', lw=0, marker='^',\n            c='g')\n    ax.plot(new.loc[new['signals'] == -1].index, new['Close'][new['signals'] == -1], label='SHORT', lw=0, marker='v',\n            c='r')\n\n    plt.legend(loc='best')\n    plt.grid(True)\n    plt.title('Positions')\n\n    plt.show()\n\n    fig = plt.figure()\n    cx = fig.add_subplot(211)\n\n    new['oscillator'].plot(kind='bar', color='r')\n\n    plt.legend(loc='best')\n    plt.grid(True)\n    plt.xticks([])\n    plt.xlabel('')\n    plt.title('MACD Oscillator')\n\n    bx = fig.add_subplot(212)\n\n    new['ma1'].plot(label='ma1')\n    new['ma2'].plot(label='ma2', linestyle=':')\n\n    plt.legend(loc='best')\n    plt.grid(True)\n    plt.show()\n\ndef main():\n\n    global ma1, ma2, stdate, eddate, ticker, slicer\n\n    ma1 = 10\n    ma2 = 21\n    stdate = input('start date in format yyyy-mm-dd:')\n    eddate = input('end date in format yyyy-mm-dd:')\n    ticker = input('ticker:')\n\n    slicer = int(input('slicing:'))\n\n    # downloading data\n    df = yf.download(ticker, start=stdate, end=eddate)\n\n    new = signal_generation(df, macd)\n    new = new[slicer:]\n    plot(new, ticker)\n\nif __name__ == '__main__':\n    main()"}]}
